syntax = "proto3";
package dev.emortal.kurushimi.model;

option java_package = "dev.emortal.api.kurushimi";
option java_multiple_files = true;
option go_package = "github.com/emortalmc/kurushimi/pkg/pb";

import "google/protobuf/timestamp.proto";

message QueuedPlayer {
  // id of type UUID (minecraft player id)
  string id = 1;
  // ticket_id of type ObjectID, the ID of the ticket that the player belongs to
  string ticket_id = 2;

  optional string map_id = 3;
}

message Ticket {
  string id = 1;

  // party_id of type ObjectID (mongo id)
  string party_id = 2;

  google.protobuf.Timestamp created_at = 3;


  // player_ids of type UUID (minecraft player id)
  repeated string player_ids = 4;

  string game_mode_id = 5;

  // auto_teleport if true, the proxy will listen for match messages and teleport the player to the match.
  // if false, the proxy will not auto-teleport the player and you should listen for match messages yourself.
  //
  // e.g. this is used by the proxy for lobby matchmaking as it is handled differently
  // to when the player is already connected to the server.
  //
  // NOTE: This field is optional in the request, but not optional afterwards and is resolved to true/false from the optional.
  bool auto_teleport = 6;

  // dequeue_on_disconnect: is determined by the party settings. True if the player is not in a party, or if the party
  // is not set to stay in queue on disconnect.
  // NOTE: The ticket will be deleted anyway if the party is deleted.
  bool dequeue_on_disconnect = 7;

  bool in_pending_match = 8;
}

message Match {
  message MatchTeam {
    repeated string player_ids = 1;
  }

  string id = 1;
  string game_mode_id = 2;

  // map_id selected by the matchmaker based on the game mode config
  // Only present if the game mode has a map pool.
  optional string map_id = 3;

  // tickets is a source of truth for all the grouped players in the match.
  repeated Ticket tickets = 4;
  optional Assignment assignment = 5;

  // teams is only present if a TeamInfo was provided
  // in the gamemode's config.
  repeated MatchTeam teams = 6;
}

message Assignment {
  string server_id = 1;
  string server_address = 2;
  uint32 server_port = 3;
}

message PendingMatch {
  string id = 1;
  string game_mode_id = 2;

  // ticket_ids of type ObjectID (mongo id)
  repeated string ticket_ids = 3;
  google.protobuf.Timestamp teleport_time = 4;
}

message AllocationData {
  Match match = 1;
}
